#[cfg(feature = "mkl")]
extern crate intel_mkl_src;

#[cfg(feature = "accelerate")]
extern crate accelerate_src;

use std::io::Write;
use tokenizers::Tokenizer;

use candle_core::quantized::{ggml_file, gguf_file};
use candle_core::{Device, Tensor};
use candle_transformers::generation::LogitsProcessor;

use anyhow::Result;
use candle_transformers::models::quantized_llama as model;
use model::ModelWeights;

use crate::prompt::Prompt;

use super::{LLMResponse, LLM};

const DEFAULT_PROMPT: &str = "My favorite theorem is ";

#[derive(Debug)]
enum PromptType {
    Interactive,
    Chat,
    One(String),
}

#[derive(Clone, Debug, Copy)]
enum Which {
    L7b,
    L13b,
    L70b,
    L7bChat,
    L13bChat,
    L70bChat,
    L7bCode,
    L13bCode,
    L34bCode,
    Mistral7b,
    Mistral7bInstruct,
}

impl Which {
    fn is_mistral(&self) -> bool {
        match self {
            Self::L7b
            | Self::L13b
            | Self::L70b
            | Self::L7bChat
            | Self::L13bChat
            | Self::L70bChat
            | Self::L7bCode
            | Self::L13bCode
            | Self::L34bCode => false,
            Self::Mistral7b | Self::Mistral7bInstruct => true,
        }
    }
}

struct QuantizedLlama {
    /// GGML file to load, typically a .bin file generated by the quantize command from llama.cpp
    model: Option<String>,

    /// The initial prompt, use 'interactive' for entering multiple prompts in an interactive way
    /// and 'chat' for an interactive model where history of previous prompts and generated tokens
    /// is preserved.
    prompt: Option<String>,

    /// The length of the sample to generate (in tokens).
    sample_len: usize,

    /// The tokenizer config in json format.
    tokenizer: Option<String>,

    /// The temperature used to generate samples, use 0 for greedy sampling.
    temperature: f64,

    /// Nucleus sampling probability cutoff.
    top_p: Option<f64>,

    /// The seed to use when generating random samples.
    seed: u64,

    /// Enable tracing (generates a trace-timestamp.json file).
    tracing: bool,

    /// Display the token for the specified prompt.
    verbose_prompt: bool,

    /// Penalty to be applied for repeating tokens, 1. means no penalty.
    repeat_penalty: f32,

    /// The context size to consider for the repeat penalty.
    repeat_last_n: usize,

    /// The model size to use.
    which: Which,

    /// Group-Query Attention, use 8 for the 70B version of LLaMAv2.
    gqa: Option<usize>,
}

impl QuantizedLlama {
    fn tokenizer(&self) -> anyhow::Result<Tokenizer> {
        let tokenizer_path = match &self.tokenizer {
            Some(config) => std::path::PathBuf::from(config),
            None => {
                let api = hf_hub::api::sync::Api::new()?;
                let repo = if self.which.is_mistral() {
                    "mistralai/Mistral-7B-v0.1"
                } else {
                    "hf-internal-testing/llama-tokenizer"
                };
                let api = api.model(repo.to_string());
                api.get("tokenizer.json")?
            }
        };
        Tokenizer::from_file(tokenizer_path).map_err(anyhow::Error::msg)
    }

    fn model(&self) -> anyhow::Result<std::path::PathBuf> {
        let model_path = match &self.model {
            Some(config) => std::path::PathBuf::from(config),
            None => {
                let (repo, filename) = match self.which {
                    Which::L7b => ("TheBloke/Llama-2-7B-GGML", "llama-2-7b.ggmlv3.q4_0.bin"),
                    Which::L13b => ("TheBloke/Llama-2-13B-GGML", "llama-2-13b.ggmlv3.q4_0.bin"),
                    Which::L70b => ("TheBloke/Llama-2-70B-GGML", "llama-2-70b.ggmlv3.q4_0.bin"),
                    Which::L7bChat => ("TheBloke/Llama-2-7B-Chat-GGML", "llama-2-7b-chat.ggmlv3.q4_0.bin"),
                    Which::L13bChat => ("TheBloke/Llama-2-13B-Chat-GGML", "llama-2-13b-chat.ggmlv3.q4_0.bin"),
                    Which::L70bChat => ("TheBloke/Llama-2-70B-Chat-GGML", "llama-2-70b-chat.ggmlv3.q4_0.bin"),
                    Which::L7bCode => ("TheBloke/CodeLlama-7B-GGUF", "codellama-7b.Q8_0.gguf"),
                    Which::L13bCode => ("TheBloke/CodeLlama-13B-GGUF", "codellama-13b.Q8_0.gguf"),
                    Which::L34bCode => ("TheBloke/CodeLlama-34B-GGUF", "codellama-34b.Q8_0.gguf"),
                    Which::Mistral7b => ("TheBloke/Mistral-7B-v0.1-GGUF", "mistral-7b-v0.1.Q4_K_S.gguf"),
                    Which::Mistral7bInstruct => (
                        "TheBloke/Mistral-7B-Instruct-v0.1-GGUF",
                        "mistral-7b-instruct-v0.1.Q4_K_S.gguf",
                    ),
                };
                let api = hf_hub::api::sync::Api::new()?;
                let api = api.model(repo.to_string());
                api.get(filename)?
            }
        };
        Ok(model_path)
    }
}

fn print_token(next_token: u32, tokenizer: &Tokenizer) {
    // Extracting the last token as a string is complicated, here we just apply some simple
    // heuristics as it seems to work well enough for this example. See the following for more
    // details:
    // https://github.com/huggingface/tokenizers/issues/1141#issuecomment-1562644141
    if let Some(text) = tokenizer.id_to_token(next_token) {
        let text = text.replace('‚ñÅ', " ");
        let ascii = text
            .strip_prefix("<0x")
            .and_then(|t| t.strip_suffix('>'))
            .and_then(|t| u8::from_str_radix(t, 16).ok());
        match ascii {
            None => print!("{text}"),
            Some(ascii) => {
                if let Some(chr) = char::from_u32(ascii as u32) {
                    if chr.is_ascii() {
                        print!("{chr}")
                    }
                }
            }
        }
        let _ = std::io::stdout().flush();
    }
}

fn format_size(size_in_bytes: usize) -> String {
    if size_in_bytes < 1_000 {
        format!("{}B", size_in_bytes)
    } else if size_in_bytes < 1_000_000 {
        format!("{:.2}KB", size_in_bytes as f64 / 1e3)
    } else if size_in_bytes < 1_000_000_000 {
        format!("{:.2}MB", size_in_bytes as f64 / 1e6)
    } else {
        format!("{:.2}GB", size_in_bytes as f64 / 1e9)
    }
}

impl LLM for QuantizedLlama {
    fn generate(&self, prompt: Box<dyn Prompt>) -> Result<LLMResponse> {
        use tracing_chrome::ChromeLayerBuilder;
        use tracing_subscriber::prelude::*;

        let temperature = if self.temperature == 0. {
            None
        } else {
            Some(self.temperature)
        };
        let _guard = if self.tracing {
            let (chrome_layer, guard) = ChromeLayerBuilder::new().build();
            tracing_subscriber::registry().with(chrome_layer).init();
            Some(guard)
        } else {
            None
        };

        println!(
            "avx: {}, neon: {}, simd128: {}, f16c: {}",
            candle_core::utils::with_avx(),
            candle_core::utils::with_neon(),
            candle_core::utils::with_simd128(),
            candle_core::utils::with_f16c()
        );
        println!(
            "temp: {:.2} repeat-penalty: {:.2} repeat-last-n: {}",
            self.temperature, self.repeat_penalty, self.repeat_last_n
        );

        let model_path = self.model()?;
        let mut file = std::fs::File::open(&model_path)?;
        let start = std::time::Instant::now();

        let mut model = match model_path.extension().and_then(|v| v.to_str()) {
            Some("gguf") => {
                let model = gguf_file::Content::read(&mut file)?;
                let mut total_size_in_bytes = 0;
                for (_, tensor) in model.tensor_infos.iter() {
                    let elem_count = tensor.shape.elem_count();
                    total_size_in_bytes += elem_count * tensor.ggml_dtype.type_size() / tensor.ggml_dtype.blck_size();
                }
                println!(
                    "loaded {:?} tensors ({}) in {:.2}s",
                    model.tensor_infos.len(),
                    &format_size(total_size_in_bytes),
                    start.elapsed().as_secs_f32(),
                );
                ModelWeights::from_gguf(model, &mut file)?
            }
            Some("ggml" | "bin") | Some(_) | None => {
                let model = ggml_file::Content::read(&mut file)?;
                let mut total_size_in_bytes = 0;
                for (_, tensor) in model.tensors.iter() {
                    let elem_count = tensor.shape().elem_count();
                    total_size_in_bytes += elem_count * tensor.dtype().type_size() / tensor.dtype().blck_size();
                }
                println!(
                    "loaded {:?} tensors ({}) in {:.2}s",
                    model.tensors.len(),
                    &format_size(total_size_in_bytes),
                    start.elapsed().as_secs_f32(),
                );
                println!("params: {:?}", model.hparams);
                let default_gqa = match self.which {
                    Which::L7b
                    | Which::L13b
                    | Which::L7bChat
                    | Which::L13bChat
                    | Which::L7bCode
                    | Which::L13bCode
                    | Which::L34bCode => 1,
                    Which::Mistral7b | Which::Mistral7bInstruct | Which::L70b | Which::L70bChat => 8,
                };
                ModelWeights::from_ggml(model, self.gqa.unwrap_or(default_gqa))?
            }
        };
        println!("model built");

        let tokenizer = self.tokenizer()?;
        let prompt = match self.prompt.as_deref() {
            Some("chat") => PromptType::Chat,
            Some("interactive") => PromptType::Interactive,
            Some(s) => PromptType::One(s.to_string()),
            None => PromptType::One(DEFAULT_PROMPT.to_string()),
        };

        let mut pre_prompt_tokens = vec![];
        loop {
            let prompt_str = match &prompt {
                PromptType::One(prompt) => prompt.clone(),
                PromptType::Interactive | PromptType::Chat => {
                    print!("> ");
                    std::io::stdout().flush()?;
                    let mut prompt = String::new();
                    std::io::stdin().read_line(&mut prompt)?;
                    if prompt.ends_with('\n') {
                        prompt.pop();
                        if prompt.ends_with('\r') {
                            prompt.pop();
                        }
                    }
                    if self.which.is_mistral() {
                        format!("[INST] {prompt} [/INST]")
                    } else {
                        prompt
                    }
                }
            };
            print!("{}", &prompt_str);
            let tokens = tokenizer.encode(prompt_str, true).map_err(anyhow::Error::msg)?;
            if self.verbose_prompt {
                for (token, id) in tokens.get_tokens().iter().zip(tokens.get_ids().iter()) {
                    let token = token.replace('‚ñÅ', " ").replace("<0x0A>", "\n");
                    println!("{id:7} -> '{token}'");
                }
            }

            let prompt_tokens = [&pre_prompt_tokens, tokens.get_ids()].concat();
            let to_sample = self.sample_len.saturating_sub(1);
            let prompt_tokens = if prompt_tokens.len() + to_sample > model::MAX_SEQ_LEN - 10 {
                let to_remove = prompt_tokens.len() + to_sample + 10 - model::MAX_SEQ_LEN;
                prompt_tokens[prompt_tokens.len().saturating_sub(to_remove)..].to_vec()
            } else {
                prompt_tokens
            };
            let mut all_tokens = vec![];
            let mut logits_processor = LogitsProcessor::new(self.seed, temperature, self.top_p);

            let start_prompt_processing = std::time::Instant::now();
            let mut next_token = {
                let input = Tensor::new(prompt_tokens.as_slice(), &Device::Cpu)?.unsqueeze(0)?;
                let logits = model.forward(&input, 0)?;
                let logits = logits.squeeze(0)?;
                logits_processor.sample(&logits)?
            };
            let prompt_dt = start_prompt_processing.elapsed();
            all_tokens.push(next_token);
            print_token(next_token, &tokenizer);

            let eos_token = *tokenizer.get_vocab(true).get("</s>").unwrap();

            let start_post_prompt = std::time::Instant::now();
            for index in 0..to_sample {
                let input = Tensor::new(&[next_token], &Device::Cpu)?.unsqueeze(0)?;
                let logits = model.forward(&input, prompt_tokens.len() + index)?;
                let logits = logits.squeeze(0)?;
                let logits = if self.repeat_penalty == 1. {
                    logits
                } else {
                    let start_at = all_tokens.len().saturating_sub(self.repeat_last_n);
                    candle_transformers::utils::apply_repeat_penalty(
                        &logits,
                        self.repeat_penalty,
                        &all_tokens[start_at..],
                    )?
                };
                next_token = logits_processor.sample(&logits)?;
                all_tokens.push(next_token);
                print_token(next_token, &tokenizer);
                if next_token == eos_token {
                    break;
                };
            }
            let dt = start_post_prompt.elapsed();
            println!(
                "\n\n{:4} prompt tokens processed: {:.2} token/s",
                prompt_tokens.len(),
                prompt_tokens.len() as f64 / prompt_dt.as_secs_f64(),
            );
            println!(
                "{:4} tokens generated: {:.2} token/s",
                to_sample,
                to_sample as f64 / dt.as_secs_f64(),
            );

            match prompt {
                PromptType::One(_) => break,
                PromptType::Interactive => {}
                PromptType::Chat => pre_prompt_tokens = [prompt_tokens.as_slice(), all_tokens.as_slice()].concat(),
            }
        }

        Ok(LLMResponse::Empty)
    }
}
